# –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. –ü—É–±–ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
# –ü–æ—á—Ç–∞: paschazverev@gmail.com
# –°–∞–π—Ç: https://zverev.io
#
# ¬© 2023, –ü–∞–≤–µ–ª –ó–≤–µ—Ä–µ–≤

from loader import bot, cache, db, config, _
from telebot.types import Message, CallbackQuery
from keyboards.inline import BotKeyboard

async def check_subscription(user, msg, action: bool = True):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ
        –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª

       :user:
       :message:
       :action:
    """
    lang = user['language_code'] # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —è–∑—ã–∫

    is_subscribed = True
    channels_subscribed = []

    redis_key_is_subscribe = f"{msg['from_user_id']}_is_subscribe"
    redis_user_subscribe = await cache.get(redis_key_is_subscribe)

    if redis_user_subscribe is None:
        channels = config['subscribe']['channels'].split("\n")
        for channel in channels:
            try:
               channel = channel.split("|")
               chat_member = await bot.get_chat_member(channel[0], msg['from_user_id'])

               is_subscribed = chat_member.status == 'member' or chat_member.status == 'administrator' or chat_member.status == 'creator'
               channels_subscribed.append(is_subscribed)
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –º—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –í–∞–∂–Ω–µ–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–º –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ
                # —á—Ç–æ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
               # is_subscribed = True
               print(e)

        if (
            config.getboolean('subscribe', 'only_one_channel') is False and \
            False not in channels_subscribed or \
            config.getboolean('subscribe', 'only_one_channel') and \
            True in channels_subscribed
        ):
            # –°–æ–∑–¥–∞—ë–º –≤ –∫—ç—à–µ —Å—Ç—Ä–æ–∫—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω
            # –ò —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ n-–º–∏–Ω—É—Ç
            await cache.set(redis_key_is_subscribe, 1)
            await cache.expire(redis_key_is_subscribe, 60)

    if config.getboolean('subscribe', 'only_one_channel') is False and False in channels_subscribed:
        is_subscribed = False

    if config.getboolean('subscribe', 'only_one_channel') and True in channels_subscribed:
        is_subscribed = True

    if action:
        promotion_text = _('promotion_text', lang)
        if config.getboolean('subscribe', 'only_one_channel'):
            promotion_text += _('promotion_text_only_one_channel')

        if type(message) == CallbackQuery:
            await bot.edit_message_text(
                chat_id      = msg['from_user_id'],
                message_id   = msg['message_id'],
                text         = promotion_text,
                parse_mode   = "Markdown",
                reply_markup = BotKeyboard.subscribe_channel(lang)
            )

        if type(message) == Message:
            await bot.send_message(
                chat_id      = msg['chat_id'],
                text         = promotion_text,
                parse_mode   = "Markdown",
                reply_markup = BotKeyboard.subscribe_channel(lang)
            )

    return is_subscribed


async def is_chat_exist(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç –≤ –±–æ—Ç–µ
    """
    telegram_chat_id = message.chat.id
    chat = await db.get_user(telegram_chat_id, type="chat")

    # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º
    if chat is None:
        await db.create_user(
            message.chat.id,
            username=message.chat.id or _('neurouser'),
            lang='ru',
            type='chat',
            balance=config.get('default', 'free_tokens')
        )
        chat = await db.get_user(message.chat.id, type='chat')

    await bot.reply_to(
        message,
        f'üôã *–ü—Ä–∏–≤–µ—Ç!*\n\nChat ID: `{message.chat.id}`\n–ë–∞–ª–∞–Ω—Å: *{chat["balance"]} —Ç–æ–∫–µ–Ω–æ–≤*\n\n–í —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /gpt.\n\n**/gpt** _–≤–∞—à –∑–∞–ø—Ä–æ—Å_ \n_ChatGPT –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–∞—à –≤–æ–ø—Ä–æ—Å._\n\n',
        parse_mode="Markdown"
    )

    return True
